name: Lint subtrees.json

on:
  pull_request:
    paths:
      - '.github/subtrees.json'

  workflow_call:
  workflow_dispatch:

jobs:
#   hello_world_job:
#     runs-on: ubuntu-latest
#     name: A job to say hello
#     steps:
#       - uses: actions/checkout@v4
#       - id: foo
#         uses: ./.github/actions/hello-world-composite-action
#         with:
#           who-to-greet: 'Mona the Octocat'
#       - run: echo random-number "$RANDOM_NUMBER"
#         shell: bash
#         env:
#           RANDOM_NUMBER: ${{ steps.foo.outputs.random-number }}    

  lint-subtrees:
    runs-on: ubuntu-latest
    env:
      CI_SERVER_HOST: github.com
      GROUP: ${{ github.repository_owner }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      - name: Validate subtrees.json
        run: |
          set -e

          JSON=".github/subtrees.json"

          echo "Validating $JSON..."

          # Ensure it's valid JSON
          jq empty "$JSON"

          # Check required structure
          missing=$(jq 'to_entries | map(select(.value.prefix == null or .value.url == null)) | length' "$JSON")
          if [ "$missing" -ne 0 ]; then
            echo "❌ Some subtree entries are missing 'prefix' or 'url'"
            jq 'to_entries | map(select(.value.prefix == null or .value.url == null))' "$JSON"
            exit 1
          fi

          # Check for bad URLs
          bad_urls=$(jq -r 'to_entries[] | select(.value.url | test("git@.+\\.git$") | not) | .value.url' "$JSON")
          if [ -n "$bad_urls" ]; then
            echo "❌ Invalid URLs found for the following subtrees:"
            echo "$bad_urls"
            exit 1
          fi

          # prepare test repository
          mkdir -p /tmp/subtree-push-test
          pushd /tmp/subtree-push-test
          # git init -q
          # git commit --allow-empty -m "Test commit" > /dev/null
          git init
          git commit --allow-empty -m "Test commit"

          mapfile -t entries < <(jq -r 'to_entries[] | "\(.value.prefix) \(.value.url)"' "$JSON" | envsubst)
          for entry in "${entries[@]}"; do
            read -r prefix url <<< "$entry"
            test_branch="__$prefix"
            # git remote add "$remote" "$url"
            if git push $url "HEAD:refs/heads/$test_branch"; then
              echo "✅ Push OK: $url"
              git push "$remote" --delete "$test_branch" || true
            else
              echo "❌ Push FAILED: $url"
              exit 1
            fi
          done          

          echo "✅ subtrees.json looks good!"
